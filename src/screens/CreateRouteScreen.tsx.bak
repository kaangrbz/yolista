import React, { useState, useEffect } from 'react';
import {
    View,
    Text,
    StyleSheet,
    Alert,
    TextInput,
    TouchableOpacity,
    Image,
    ScrollView
} from 'react-native';
import { supabase } from '../lib/supabase';
import { useNavigation } from '@react-navigation/native';
import DropDownPicker from 'react-native-dropdown-picker';
import RouteModel from '../model/routes.model';
import { launchImageLibrary } from 'react-native-image-picker';
import { LoadingFloatingAction } from '../components';
// Bookmark functionality removed
import { showToast } from '../utils/alert';
import { useCityStore, CityState } from '../store/cityStore';

// Route interface
interface RoutePoint {
    id: string;
    title: string;
    description?: string;
    image_url?: string;
    latitude?: number;
    longitude?: number;
    order_index: number;
}

export const CreateRouteScreen = () => {
    const navigation = useNavigation();

    // Form state
    const [formData, setFormData] = useState({
        title: '',
        description: '',
        mainImage: ''
    });
    const [selectedImage, setSelectedImage] = useState<string | null>(null);
    const [formErrors, setFormErrors] = useState({
        title: '',
        description: '',
        cityId: '',
        mainImage: '',
        routes: ''
    });
    const [touched, setTouched] = useState({
        title: false,
        description: false,
        cityId: false,
        mainImage: false,
        routes: false
    });
    
    // Route points state
    const [routePoints, setRoutePoints] = useState<RoutePoint[]>([]);
    
    // Route management functions
    const addRoutePoint = () => {
        const newRoutePoint: RoutePoint = {
            id: Date.now().toString(),
            title: '',
            description: '',
            order_index: routePoints.length
        };
        setRoutePoints([...routePoints, newRoutePoint]);
    };
    
    const updateRoutePoint = (id: string, field: keyof RoutePoint, value: any) => {
        setRoutePoints(routePoints.map(point => 
            point.id === id ? { ...point, [field]: value } : point
        ));
    };
    
    const removeRoutePoint = (id: string) => {
        if (routePoints.length <= 1) {
            Alert.alert('Uyarı', 'En az bir durak olmalıdır.');
            return;
        }
        
        // Remove the route point and reorder the remaining points
        const updatedPoints = routePoints
            .filter(point => point.id !== id)
            .map((point, index) => ({
                ...point,
                order_index: index
            }));
        
        setRoutePoints(updatedPoints);
    };
    
    const moveRoutePoint = (fromIndex: number, toIndex: number) => {
        if (fromIndex === toIndex) return;
        
        const updatedPoints = [...routePoints];
        const [movedPoint] = updatedPoints.splice(fromIndex, 1);
        updatedPoints.splice(toIndex, 0, movedPoint);
        
        // Update order_index values
        const reorderedPoints = updatedPoints.map((point, index) => ({
            ...point,
            order_index: index
        }));
        
        setRoutePoints(reorderedPoints);
    };
    
    const handleRouteImageSelect = async (pointId: string) => {
        try {
            const result = await launchImageLibrary({
                mediaType: 'photo',
                selectionLimit: 1,
                quality: 0.8,
            });
    
            if (!result.didCancel && result.assets && result.assets.length > 0) {
                const asset = result.assets[0];
                if (asset.uri) {
                    updateRoutePoint(pointId, 'image_url', asset.uri);
                }
            }
        } catch (error) {
            console.error('Error selecting image:', error);
            Alert.alert('Hata', 'Resim seçilirken bir hata oluştu');
        }
    };

    const defaultSelectedCityId = useCityStore((state: CityState) => state.selectedCityId);
    const [cities, setCities] = useState<{ label: string, value: number }[]>([]);
    const [selectedCityId, setSelectedCityId] = useState<number | null>(defaultSelectedCityId);
    const [open, setOpen] = useState(false);
    const [isPublishing, setIsPublishing] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    // Get selected city ID from store at the top level
    console.log('defaultSelectedCityId', defaultSelectedCityId);

    // Bookmark functionality removed

    useEffect(() => {
        fetchCities();
        
        // Initialize with one empty route point
        if (routePoints.length === 0) {
            addRoutePoint();
        }
    }, []);

    const fetchCities = async () => {
        try {
            setIsLoading(true);
            const { data, error } = await supabase
                .from('cities')
                .select('*')
                .order('name');

            if (error) throw error;
            setCities(data.map((city) => ({ label: city.name, value: city.id })));
        } catch (error) {
            console.error('Error fetching cities:', error);
        } finally {
            setIsLoading(false);
        }
    };

    // Validate form fields
    const validateForm = () => {
        const errors = {
            mainImage: '',
            title: '',
            description: '',
            cityId: '',
            routes: ''
        };
        let isValid = true;

        // Main Image validation
        // if (!formData.mainImage) {
        //     errors.mainImage = 'Rota resmi zorunludur';
        //     isValid = false;
        // }

        // Title validation
        if (!formData.title) {
            errors.title = 'Rota adı zorunludur';
            isValid = false;
        } else if (formData.title.length < 2) {
            errors.title = 'Rota adı en az 2 karakter olmalıdır';
            isValid = false;
        }

        // Description validation
        // if (!formData.description) {
        //     errors.description = 'Açıklama zorunludur';
        //     isValid = false;
        // } else if (formData.description.length < 10) {
        //     errors.description = 'Açıklama en az 10 karakter olmalıdır';
        //     isValid = false;
        // }

        // City validation
        if (!selectedCityId) {
            errors.cityId = 'Şehir seçimi zorunludur';
            isValid = false;
        }

        setFormErrors(errors);
        return isValid;
    };

    // Handle input changes
    const handleInputChange = (field: string, value: string) => {
        setFormData(prev => ({
            ...prev,
            [field]: value
        }));

        // Mark field as touched
        if (!touched[field as keyof typeof touched]) {
            setTouched(prev => ({
                ...prev,
                [field]: true
            }));
        }
    };

    // Handle input blur
    const handleInputBlur = (field: string) => {
        setTouched(prev => ({
            ...prev,
            [field]: true
        }));
        validateForm();

// Handle input blur
const handleInputBlur = (field: string) => {
    setTouched(prev => ({
        ...prev,
        [field]: true
    }));
    validateForm();
};

const handleSubmit = async (): Promise<void> => {
    showToast('warning', 'Form kontrol ediliyor');
    return;
    // Validate form fields
    const errors = validateForm();
    if (Object.values(errors).some(error => error !== '')) {
        setFormErrors(errors);
        setTouched({
            title: true,
            description: true,
            cityId: true,
            mainImage: true,
            routes: true
        });
        showToast('error', 'Lütfen formu kontrol edin');
        return false;
    }

    setIsPublishing(true);

    // Make sure selectedCityId is not null before proceeding
    if (selectedCityId === null) {
        Alert.alert('Hata', 'Lütfen şehir seçiniz');
        setIsPublishing(false);
        return;
    }

    let routeData = {
        title: formData.title,
        description: formData.description,
        city_id: selectedCityId, // Now we're sure it's not null
        author_id: (await supabase.auth.getUser())?.data.user?.id,
        routePoints: routePoints.map(point => ({
            title: point.title,
            description: point.description || '',
            image_url: point.image_url || '',
            latitude: point.latitude,
            longitude: point.longitude,
            order_index: point.order_index
        })),
    };
        if (selectedCityId === null) {
            Alert.alert('Hata', 'Lütfen şehir seçiniz');
            setIsPublishing(false);
            return;
        }

        let routeData = {
            title: formData.title,
            description: formData.description,
            city_id: selectedCityId, // Now we're sure it's not null
            author_id: (await supabase.auth.getUser())?.data.user?.id,
            routePoints: routePoints.map(point => ({
                title: point.title,
                description: point.description || '',
                image_url: point.image_url || '',
                latitude: point.latitude,
                longitude: point.longitude,
                order_index: point.order_index
            })),
        };

        try {
            const { data, error } = await RouteModel.createRoute(routeData);

            if (error) {
                showToast('error', 'Rota eklenirken bir hata oluştu', 'Hata');
                return;
            }

            console.log('routeData', data);

            showToast('success', 'Rota başarıyla eklendi', 'Başarılı');
            navigation.goBack();
        } catch (error) {
            console.error('Error adding route:', error);
            showToast('error', 'Rota eklenirken bir hata oluştu', 'Hata');
        }
        finally {
            setIsPublishing(false);
        }
    };

    return (
        <>
            <ScrollView style={[styles.container, { backgroundColor: '#fff' }]}>
                <View style={styles.form}>
                    <View style={styles.inputContainer}>
                        <Text style={[styles.label, { color: '#222' }]}>
                            Rota Resmi <Text style={{ color: '#666' }}>(Önerilen oran: 2:1)</Text>
                        </Text>
                        <TouchableOpacity
                            style={{
                                height: 200,
                                borderWidth: 1,
                                borderColor: '#ddd',
                                borderRadius: 8,
                                marginBottom: 8,
                                alignItems: 'center',
                                justifyContent: 'center',
                                backgroundColor: '#fafafa',
                            }}
                            onPress={async () => {
                                const result = await launchImageLibrary({
                                    mediaType: 'photo',
                                    selectionLimit: 1,
                                });
                                const asset = result.assets?.[0];
                                if (!result.didCancel && asset && asset.uri) {
                                    setSelectedImage(asset.uri);
                                    setFormData(prev => ({ ...prev, mainImage: asset.uri as string }));
                                }
                            }}
                        >
                            {selectedImage ? (
                                <Image
                                    source={{ uri: selectedImage }}
                                    style={{ width: '100%', height: 200, borderRadius: 8 }}
                                    resizeMode="contain"
                                />
                            ) : (
                                <Text style={{ color: '#888' }}>Galeriden resim seç</Text>
                            )}
                        </TouchableOpacity>
                        {formErrors.mainImage && touched.mainImage && (
                            <Text style={styles.errorText}>{formErrors.mainImage}</Text>
                        )}
                    </View>
                    <View style={styles.inputContainer}>
                        <Text style={[styles.label, { color: '#222' }]}>
                            Rota Adı <Text style={{ color: 'red' }}>*</Text>
                        </Text>
                        <TextInput
                            style={styles.input}
                            onChangeText={(text) => handleInputChange('title', text)}
                            onBlur={() => handleInputBlur('title')}
                            value={formData.title}
                            placeholder="Rota adını girin"
                            placeholderTextColor={'#999'}
                        />
                        {formErrors.title && touched.title && (
                            <Text style={styles.errorText}>{formErrors.title}</Text>
                        )}
                    </View>
                    <View style={styles.inputContainer}>
                        <Text style={[styles.label, { color: '#222' }]}>
                            Açıklama
                        </Text>
                        <TextInput
                            style={[styles.input, { height: 100 }]}
                            multiline
                            numberOfLines={4}
                            onChangeText={(text) => handleInputChange('description', text)}
                            onBlur={() => handleInputBlur('description')}
                            value={formData.description}
                            placeholder="Rota açıklamasını girin"
                            placeholderTextColor={'#999'}
                        />
                        {formErrors.description && touched.description && (
                            <Text style={styles.errorText}>{formErrors.description}</Text>
                        )}
                    </View>

                    <View style={styles.inputContainer}>
                        <Text style={[styles.label, { color: '#222' }]}>
                            Şehir seç <Text style={{ color: 'red' }}>*</Text>
                        </Text>
                        <DropDownPicker
                            open={open}
                            value={selectedCityId}
                            items={cities}
                            setOpen={setOpen}
                            setValue={setSelectedCityId}
                            searchable
                            onChangeValue={(value) => {
                                if (value !== null) {
                                    handleInputBlur('cityId');
                                }
                            }}
                            setItems={setCities}
                            placeholder="Şehir seçin"
                            style={{
                                borderColor: '#ddd',
                                backgroundColor: '#fff',
                            }}
                            textStyle={{
                                color: '#000',
                            }}
                            dropDownContainerStyle={{
                                borderColor: '#ddd',
                                backgroundColor: '#fff',
                            }}
                            zIndex={1000}
                            onClose={() => handleInputBlur('cityId')}
                        />
                        {formErrors.cityId && touched.cityId && (
                            <Text style={styles.errorText}>{formErrors.cityId}</Text>
                        )}
                    </View>
                </View>
                <View style={{ height: 80 }} />
            </ScrollView>

            <View style={{ zIndex: 1000, bottom: 0, position: 'absolute', right: 0 }}>
                <LoadingFloatingAction
                    onPress={handleSubmit}
                    isDisabled={isPublishing}
                    backgroundColor={isPublishing ? '#ccc' : '#121212'}
                    iconName={"leaf"} />
            </View>
        </>
    );
}

const styles = StyleSheet.create({
    sectionTitle: {
        fontSize: 18,
        fontWeight: '600',
        marginBottom: 8,
    },
    routeListContainer: {
        maxHeight: 500,
    },
    routeItem: {
        backgroundColor: '#f9f9f9',
        borderRadius: 8,
        padding: 12,
        marginBottom: 16,
        borderWidth: 1,
        borderColor: '#eee',
    },
    routeHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 12,
    },
    routeHeaderText: {
        fontSize: 16,
        fontWeight: '600',
    },
    routeActions: {
        flexDirection: 'row',
    },
    actionButton: {
        width: 30,
        height: 30,
        borderRadius: 15,
        backgroundColor: '#f0f0f0',
        justifyContent: 'center',
        alignItems: 'center',
        marginLeft: 8,
    },
    actionButtonText: {
        fontSize: 16,
        color: '#333',
    },
    removeButton: {
        backgroundColor: '#ffeeee',
    },
    removeButtonText: {
        color: '#ff6b6b',
        fontSize: 16,
    },
    imageSelector: {
        height: 150,
        backgroundColor: '#f0f0f0',
        borderRadius: 8,
        justifyContent: 'center',
        alignItems: 'center',
        marginBottom: 12,
        overflow: 'hidden',
    },
    routeImage: {
        width: '100%',
        height: '100%',
        resizeMode: 'cover',
    },
    placeholderImage: {
        justifyContent: 'center',
        alignItems: 'center',
    },
    placeholderText: {
        color: '#999',
        fontSize: 14,
    },
    inputGroup: {
        marginBottom: 12,
    },
    inputLabel: {
        fontSize: 14,
        marginBottom: 4,
        color: '#666',
    },
    textInput: {
        backgroundColor: '#fff',
        borderWidth: 1,
        borderColor: '#ddd',
        borderRadius: 4,
        padding: 8,
        color: '#333',
    },
    textAreaInput: {
        height: 80,
        textAlignVertical: 'top',
    },
    addButton: {
        backgroundColor: '#121212',
        padding: 12,
        borderRadius: 8,
        alignItems: 'center',
        marginTop: 8,
    },
    addButtonText: {
        color: '#fff',
        fontSize: 14,
        fontWeight: '600',
    },
    errorText: {
        color: '#ff6b6b',
        fontSize: 12,
        marginTop: 4,
    },
    container: {
        flex: 1,
        backgroundColor: '#fff',
    },
    inputContainer: {
        marginBottom: 16,
    },
    label: {
        fontSize: 16,
        marginBottom: 8,
    },
    input: {
        height: 40,
        borderWidth: 1,
        borderColor: '#ddd',
        borderRadius: 4,
        paddingHorizontal: 10,
        color: '#000',
    },
    pickerContainer: {
        width: '100%',
        marginBottom: 10,
        backgroundColor: '#fff',
        borderRadius: 4,
        overflow: 'hidden',
    },
    picker: {
        height: 40,
        borderWidth: 1,
        borderColor: '#ddd',
        borderRadius: 4,
        paddingHorizontal: 10,
        color: '#222',
    },
    pickerItem: {
        fontSize: 16,
        color: '#222',
    },
    button: {
        backgroundColor: '#222',
        padding: 12,
        borderRadius: 4,
        alignItems: 'center',
        marginTop: 16,
    },
    buttonSecondary: {
        backgroundColor: '#fff',
        borderWidth: 1,
        borderColor: '#222',
    },
    buttonDisabled: {
        opacity: 0.6,
    },
    buttonText: {
        color: '#fff',
        fontSize: 16,
        fontWeight: 'bold',
    },
    errorText: {
        color: 'red',
        fontSize: 12,
        marginTop: 4,
    },
    row: {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
    },
    column: {
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
        columnGap: 16,
    },
    form: {
        padding: 16,
    },
    dropdown: {
        height: 40,
        borderColor: '#ddd',
        borderRadius: 4,
        paddingHorizontal: 8,
        marginBottom: 10,
    },
    iconContainer: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        gap: 8,
    },
    iconButton: {
        width: 48,
        height: 48,
        borderRadius: 24,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#f5f5f5',
    },
    selectedIcon: {
        backgroundColor: '#cc0000',
    },
    colorContainer: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        gap: 8,
    },
    colorButton: {
        width: 40,
        height: 40,
        borderRadius: 20,
        borderWidth: 2,
        borderColor: 'transparent',
    },
    selectedColor: {
        borderColor: '#cc0000',
    },
    submitButton: {
        backgroundColor: '#121212',
        padding: 16,
        width: '50%',
        borderRadius: 8,
        alignItems: 'center',
        marginTop: 20,
        flexDirection: 'row',
        justifyContent: 'center',
        gap: 8,
    },
    submitButtonText: {
        color: '#fff',
        fontSize: 16,
        fontWeight: '600',
    },
    dropdownButtonStyle: {
        width: 200,
        height: 50,
        backgroundColor: '#E9ECEF',
        borderRadius: 12,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        paddingHorizontal: 12,
    },
    dropdownButtonTxtStyle: {
        flex: 1,
        fontSize: 16,
        fontWeight: '500',
        color: '#151E26',
    },
    dropdownButtonArrowStyle: {
        fontSize: 28,
    },
    dropdownButtonIconStyle: {
        fontSize: 28,
        marginRight: 8,
    },
    dropdownMenuStyle: {
        backgroundColor: '#E9ECEF',
        borderRadius: 8,
    },
    dropdownItemStyle: {
        width: '100%',
        flexDirection: 'row',
        paddingHorizontal: 12,
        justifyContent: 'center',
        alignItems: 'center',
        paddingVertical: 8,
    },
    dropdownItemTxtStyle: {
        flex: 1,
        fontSize: 16,
        fontWeight: '500',
        color: '#151E26',
    },
    dropdownItemIconStyle: {
        fontSize: 28,
        marginRight: 8,
    },
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    }
})
